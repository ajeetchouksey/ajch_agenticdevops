# GitHub Actions Workflow: Deploy DevOps Agent Resources
# Uses Microsoft-hosted agent for deployment
# Follows industry best practices for naming and security

name: 'Deploy DevOps Agent Resources'

on:
  workflow_dispatch:
  push:
    paths:
      - 'bootstrap/**'
      - '.github/workflows/deploy-devops-agent.yml'

permissions:
  # id-token: write # Removed OIDC authentication, not needed for Service Principal
  contents: read

jobs:
  deploy_devops_agent:
    name: 'Deploy DevOps Agent'
    runs-on: ubuntu-latest
    environment: production
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
      AZURE_STORAGE_CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
      AZURE_STORAGE_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log Start Time
        id: start_time
        uses: actions/github-script@v7
        with:
          script: |
            const start = new Date().toISOString();
            core.setOutput('start', start);

      # ...existing code...

      - name: Azure Login action
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        id: init
        working-directory: bootstrap
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ secrets.AZURE_STORAGE_RESOURCE_GROUP }}
          STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          STORAGE_ACCOUNT_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER_NAME }}
        run: terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT" -backend-config="container_name=$CONTAINER_NAME" -backend-config="resource_group_name=$RESOURCE_GROUP" -backend-config="key=adoagent.tfstate" -backend-config="access_key=$STORAGE_ACCOUNT_KEY"
     
      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: bootstrap
          framework: terraform
          quiet: true

      - name: Terraform Plan
        id: plan
        working-directory: bootstrap
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform plan -var 'environment=p' -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}'

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        id: apply
        working-directory: bootstrap
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform apply -auto-approve -var 'environment=p' -var 'subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}' -var 'tenant_id=${{ secrets.AZURE_TENANT_ID }}'

      - name: Post-Apply Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: bootstrap

      - name: Upload Terraform Plan as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: devops-agent-tfplan
          path: bootstrap/tfplan

  
      - name: Log End Time and Duration
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const start = new Date(process.env.START_TIME || '');
            const end = new Date();
            const duration = (end - start) / 1000;
            core.info(`Pipeline duration: ${duration} seconds`);
        env:
          START_TIME: ${{ steps.start_time.outputs.start }}

      # Note: Copilot/AI pipeline recommendations are not available as a workflow action yet.
      # Use Copilot in your editor for YAML and code suggestions.
